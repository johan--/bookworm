var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","bookscontroller","goodreads","author","books","client","friends","request","reviews","shelves","users","relationship","relationshipscontroller","relationshipshelper","sessionscontroller","sessionshelper","staticpagescontroller","staticpageshelper","user","userscontroller","usershelper","about()","author()","author_by_name()","book()","book_by_author()","book_by_isbn()","book_by_series()","book_by_title()","config()","create()","create()","create()","current_user()","destroy()","destroy()","follow()","followers()","following()","following?()","friends()","gravatar_for()","home()","index()","index()","logged_in?()","login()","logout()","new()","new()","new()","new()","parse()","request()","reset_config()","review()","search()","search_books()","set_config()","shelf()","show()","show()","team()","unfollow()","user()","readme"],"longSearchIndex":["applicationcontroller","applicationhelper","bookscontroller","goodreads","goodreads::author","goodreads::books","goodreads::client","goodreads::friends","goodreads::request","goodreads::reviews","goodreads::shelves","goodreads::users","relationship","relationshipscontroller","relationshipshelper","sessionscontroller","sessionshelper","staticpagescontroller","staticpageshelper","user","userscontroller","usershelper","staticpagescontroller#about()","goodreads::author#author()","goodreads::author#author_by_name()","goodreads::books#book()","goodreads::books#book_by_author()","goodreads::books#book_by_isbn()","goodreads::books#book_by_series()","goodreads::books#book_by_title()","goodreads::config()","relationshipscontroller#create()","sessionscontroller#create()","userscontroller#create()","sessionshelper#current_user()","relationshipscontroller#destroy()","sessionscontroller#destroy()","user#follow()","userscontroller#followers()","userscontroller#following()","user#following?()","goodreads::friends#friends()","usershelper#gravatar_for()","staticpagescontroller#home()","bookscontroller#index()","userscontroller#index()","sessionshelper#logged_in?()","sessionshelper#login()","sessionshelper#logout()","goodreads::new()","goodreads::client::new()","sessionscontroller#new()","userscontroller#new()","goodreads::request#parse()","goodreads::request#request()","goodreads::reset_config()","goodreads::reviews#review()","bookscontroller#search()","goodreads::books#search_books()","goodreads::set_config()","goodreads::shelves#shelf()","bookscontroller#show()","userscontroller#show()","staticpagescontroller#team()","user#unfollow()","goodreads::users#user()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["BooksController","","BooksController.html","",""],["Goodreads","","Goodreads.html","","<p>The wrapper module the will create a new instance of Client All request to\nGoodreads will be done through …\n"],["Goodreads::Author","","Goodreads/Author.html","",""],["Goodreads::Books","","Goodreads/Books.html","",""],["Goodreads::Client","","Goodreads/Client.html","",""],["Goodreads::Friends","","Goodreads/Friends.html","",""],["Goodreads::Request","","Goodreads/Request.html","",""],["Goodreads::Reviews","","Goodreads/Reviews.html","",""],["Goodreads::Shelves","","Goodreads/Shelves.html","",""],["Goodreads::Users","","Goodreads/Users.html","",""],["Relationship","","Relationship.html","",""],["RelationshipsController","","RelationshipsController.html","",""],["RelationshipsHelper","","RelationshipsHelper.html","",""],["SessionsController","","SessionsController.html","",""],["SessionsHelper","","SessionsHelper.html","",""],["StaticPagesController","","StaticPagesController.html","",""],["StaticPagesHelper","","StaticPagesHelper.html","",""],["User","","User.html","",""],["UsersController","","UsersController.html","",""],["UsersHelper","","UsersHelper.html","",""],["about","StaticPagesController","StaticPagesController.html#method-i-about","()","<p>Serves the about page.\n"],["author","Goodreads::Author","Goodreads/Author.html#method-i-author","(id, args={})","<p>Get author info by author id\n"],["author_by_name","Goodreads::Author","Goodreads/Author.html#method-i-author_by_name","(name, args={})","<p>Get author info by author name\n"],["book","Goodreads::Books","Goodreads/Books.html#method-i-book","(id)","<p>Get book by id\n"],["book_by_author","Goodreads::Books","Goodreads/Books.html#method-i-book_by_author","(author)","<p>Get book by author\n"],["book_by_isbn","Goodreads::Books","Goodreads/Books.html#method-i-book_by_isbn","(isbn)","<p>Get book by ISBN\n"],["book_by_series","Goodreads::Books","Goodreads/Books.html#method-i-book_by_series","(id)","<p>Get a list of books in a series\n"],["book_by_title","Goodreads::Books","Goodreads/Books.html#method-i-book_by_title","(title)","<p>Get book by title\n"],["config","Goodreads","Goodreads.html#method-c-config","()","<p>Get global config\n"],["create","RelationshipsController","RelationshipsController.html#method-i-create","()","<p>Creates a following/follwer relationship\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>Authenticates and signs the user in if success else user is redirected back\nto log in page\n"],["create","UsersController","UsersController.html#method-i-create","()","<p>This method saves the user to the database after a  successful sign up.\n"],["current_user","SessionsHelper","SessionsHelper.html#method-i-current_user","()","<p>Grabs the current user using user_id in session\n"],["destroy","RelationshipsController","RelationshipsController.html#method-i-destroy","()","<p>Destroys a following/follwer relationship\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>Called when a user logouts. Destroys the current sesssion.\n"],["follow","User","User.html#method-i-follow","(other_user)","<p>To follow a user\n"],["followers","UsersController","UsersController.html#method-i-followers","()","<p>Sets the followers relationship\n"],["following","UsersController","UsersController.html#method-i-following","()","<p>Sets the following relationship\n"],["following?","User","User.html#method-i-following-3F","(other_user)","<p>Test to see if the current user is following the other user\n"],["friends","Goodreads::Friends","Goodreads/Friends.html#method-i-friends","(user_id)","<p>get friends by user id\n"],["gravatar_for","UsersHelper","UsersHelper.html#method-i-gravatar_for","(user, options = { size: 80 })","<p>Get user Gravatar using MD5 hash\n"],["home","StaticPagesController","StaticPagesController.html#method-i-home","()","<p>Serves the home page or root index of the site.\n"],["index","BooksController","BooksController.html#method-i-index","()","<p>The defualt book browsing page\n"],["index","UsersController","UsersController.html#method-i-index","()",""],["logged_in?","SessionsHelper","SessionsHelper.html#method-i-logged_in-3F","()","<p>Test if a user is logged in\n"],["login","SessionsHelper","SessionsHelper.html#method-i-login","(user)","<p>Logs the given user in\n"],["logout","SessionsHelper","SessionsHelper.html#method-i-logout","()",""],["new","Goodreads","Goodreads.html#method-c-new","(opt={})","<p>Create an instance of the Client\n"],["new","Goodreads::Client","Goodreads/Client.html#method-c-new","(opt={})",""],["new","SessionsController","SessionsController.html#method-i-new","()","<p>Shows the login page\n"],["new","UsersController","UsersController.html#method-i-new","()","<p>This method passes a new user object to the view,  the signup form.\n"],["parse","Goodreads::Request","Goodreads/Request.html#method-i-parse","(response)","<p>Parse xml response from goodreads\n"],["request","Goodreads::Request","Goodreads/Request.html#method-i-request","(path, args={})","<p>Perform an API request path - Request path args - Arguments hash\n"],["reset_config","Goodreads","Goodreads.html#method-c-reset_config","()","<p>Reset global config\n"],["review","Goodreads::Reviews","Goodreads/Reviews.html#method-i-review","(id)","<p>Get review by id\n"],["search","BooksController","BooksController.html#method-i-search","(query)","<p>This will be a GET http action and will  retrieve book data from goodreads\napi\n"],["search_books","Goodreads::Books","Goodreads/Books.html#method-i-search_books","(query, args={})","<p>Search for books query - term to match book title, author, or ISBN args -\nsearch field. (title, author, …\n"],["set_config","Goodreads","Goodreads.html#method-c-set_config","(opt={})","<p>Define the global configurations\n"],["shelf","Goodreads::Shelves","Goodreads/Shelves.html#method-i-shelf","(user_id, shelf_name, args={})","<p>Get books from user&#39;s shelf\n"],["show","BooksController","BooksController.html#method-i-show","()","<p>The show page for individual books\n"],["show","UsersController","UsersController.html#method-i-show","()","<p>Description: This method routes information to the show view. the user\nprofile page based on :id\n"],["team","StaticPagesController","StaticPagesController.html#method-i-team","()","<p>Serves the team page.\n"],["unfollow","User","User.html#method-i-unfollow","(other_user)","<p>To unfollow a user\n"],["user","Goodreads::Users","Goodreads/Users.html#method-i-user","(id)","<p>Get user by id\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}